{"version":3,"sources":["_init.js","Empty.js","Blocks/Info.js","Connection/HTTP.js","Network/Info.js","Transaction/Balance.js","Transaction/Submit.js","Transaction/Upload.js","Wallet/Balance.js","Wallet/Browser.js","Wallet/Generate.js","Wallet/Import.js","Transaction/Add/Tag.js"],"names":["_InfoNode","_HTTPNode","_InfoNode2","_BalanceNode","_SubmitNode","_UploadNode","_BalanceNode2","_BrowserNode","_GenerateNode","_ImportNode","_TagNode","window","globalThis","async","imports","urls","sf","loader","mjs","Promise","all","map","v","import","task","Blackprint","loadScope","url","hasDocs","Arweave","DepsLoader","js","local","cdn","Context","createContext","EventSlot","slot","NodeToast","constructor","iface","this","clear","haveInfo","destroy","haveWarn","haveError","_reduceText","text","replace","full","slice","info","$decoration","warn","error","success","Transaction","data","type","_data","_type","Signer","_BrowserWallet","utils","renameTypeName","Blob","_Class","registerNode","Node","instance","super","setInterface","title","input","API","Hash","String","Refresh","Port","Trigger","node","hash","output","Data","blocks","getCurrent","get","routes","routeOut","Object","imported","host","port","protocol","timeout","logging","network","getInfo","StructOf","Blocks","Number","field","Current","Peers","_toast","update","Input","Output","ref","Target","Winston","signer","Tx","createTransaction","target","quantity","_sign","transactions","sign","submit","Status","post","status","TxId","id","uploader","getUploader","isComplete","uploadChunk","uploadedChunks","totalChunks","Percent","pctComplete","Submit","unsigned","arrayBuffer","tx","addTag","Fee","reward","Union","ArrayBuffer","Address","Balance","wallets","getBalance","api","wallet","generate","Private","Public","jwkToAddress","privateKey","JSON","parse","ContentType","includes","KV","kv","key"],"mappings":"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","file":"nodes-arweave.mjs","sourcesContent":["// This script will run first, and then the other files\n// depends on blackprint.config.js configuration\n\n//> Optional, just for Blackprint Editor\n// Let the Blackprint Editor know the source URL where\n// the registerNode and registerInterface belongs to\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n\n\t// This will autoload (*.sf.mjs) and (*.sf.css) file for Browser\n\t// hasInterface: true,\n\n\t// This will autoload (*.docs.json) for Browser\n\thasDocs: true,\n});\n\n// Prepare stuff when the page is loading\n// maybe like loading our dependencies for the nodes\nvar [ Arweave ] = await Blackprint.DepsLoader.js({\n\twindow: ['Arweave'],\n\n\t// need to use 'npm install' first or must exist on node_modules, will dynamically imported\n\tlocal: ['arweave'],\n\n\t// for browser, Deno, or supported environment that have internet access\n\tcdn: [\"https://cdn.jsdelivr.net/npm/arweave@^1.15.7/bundles/web.bundle.min.js\"]\n});\n\n// Global shared context\nlet Context = Blackprint.createContext('Arweave');\n\n// This is needed to avoid duplicated event listener when using hot reload\n// Event listener that registered with same slot will be replaced\nContext.EventSlot = {slot: 'my-private-event-slot'};\n\nclass NodeToast {\n\tconstructor(iface){\n\t\tthis.iface = iface;\n\t}\n\n\tclear(){\n\t\tif(this.haveInfo)\n\t\t\tthis.haveInfo.destroy();\n\t\tif(this.haveWarn)\n\t\t\tthis.haveWarn.destroy();\n\t\tif(this.haveError)\n\t\t\tthis.haveError.destroy();\n\n\t\tthis.haveInfo = false;\n\t\tthis.haveWarn = false;\n\t\tthis.haveError = false;\n\t}\n\n\t_reduceText(text){\n\t\treturn text.replace(/\\w{15,}/g, full => full.slice(0, 5)+'...');\n\t}\n\n\tinfo(text){\n\t\tif(!this.iface.$decoration) return;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveInfo)\n\t\t\tthis.haveInfo.text = text;\n\t\telse\n\t\t\tthis.haveInfo = this.iface.$decoration.info(text);\n\t}\n\n\twarn(text){\n\t\tif(!this.iface.$decoration) return;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveWarn)\n\t\t\tthis.haveWarn.text = text;\n\t\telse\n\t\t\tthis.haveWarn = this.iface.$decoration.warn(text);\n\t}\n\n\terror(text){\n\t\tif(!this.iface.$decoration) return;\n\t\ttext = this._reduceText(text);\n\n\t\tif(this.haveError)\n\t\t\tthis.haveError.text = text;\n\t\telse\n\t\t\tthis.haveError = this.iface.$decoration.error(text);\n\t}\n\n\tsuccess(text){\n\t\tif(!this.iface.$decoration) return;\n\t\tthis.iface.$decoration.success(this._reduceText(text));\n\t}\n}\n\nContext.NodeToast = NodeToast;\n\nclass Transaction {\n\tconstructor(data, type){\n\t\tthis._data = data;\n\t\tthis._type = type;\n\t}\n}\n\nclass Signer {\n\tconstructor(data){\n\t\tthis._data = data;\n\t}\n}\n\nContext.Transaction = Transaction;\nContext.Signer = Signer;\nContext._BrowserWallet = new Signer();\n\n// Fix minified class name\nBlackprint.utils.renameTypeName({\n\t'Transaction': Transaction,\n\t'Signer': Signer,\n\t'Arweave': Arweave,\n});\n\nlet Blob = window.Blob; // Browser/Deno\nif(Blob === void 0) // Node.js\n\tBlob = (await import('node:buffer')).Blob;","if(false){ // Avoid executing line below when this file being compiled\n// You can just copy and paste code below as a template for creating nodes\n\nBlackprint.registerNode(\"Arweave/FeatureName/Empty\",\nclass extends Blackprint.Node {\n\tstatic input = {};\n\tstatic output = {};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Empty\";\n\t}\n});\n\nBlackprint.registerInterface('BPIC/Arweave/FeatureName/Empty',\nContext.IFace.Empty = class EmptyIFace extends Blackprint.Interface{\n\tconstructor(node){\n\t\tsuper(node);\n\n\t\t// Add some properties for this object\n\t}\n});\n\nBlackprint.Sketch.registerInterface('BPIC/Arweave/FeatureName/Empty', {\n\ttemplate: null\n}, Context.IFace.Empty);\n\n\n}","/**\n * Get current block info for Arweave blockchain\n * @blackprint node\n * @summary Arweave\n */\nBlackprint.registerNode(\"Arweave/Blocks/Info\",\nclass InfoNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** API that already connected to Arweave's blockchain */\n\t\tAPI: Arweave,\n\t\t/** Block hash */\n\t\tHash: String,\n\t\t/** Refresh/fetch the info */\n\t\tRefresh: Blackprint.Port.Trigger(async function({ iface }){\n\t\t\tlet node = iface.node;\n\t\t\tlet hash = node.input.Hash;\n\n\t\t\tif(hash === '')\n\t\t\t\tnode.output.Data = await node.input.API.blocks.getCurrent();\n\t\t\telse node.output.Data = await node.input.API.blocks.get(hash);\n\t\t\t\n\t\t\tnode.routes.routeOut();\n\t\t}),\n\t};\n\n\tstatic output = {\n\t\t/** Raw response data */\n\t\tData: Object,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Block Info\";\n\t}\n});","/**\n * Connect to Arweave's blockchain via HTTP/HTTPS\n * @blackprint node\n * @summary HTTP\n */\nBlackprint.registerNode(\"Arweave/Connection/HTTP\",\nclass HTTPNode extends Blackprint.Node {\n\tstatic output = {\n\t\t/** API object from Arweave's library */\n\t\tAPI: Arweave,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Arweave Connection\";\n\t}\n\n\timported(){\n\t\tthis.output.API = new Arweave({\n\t\t    host: 'arweave.net',// Hostname or IP address for a Arweave host\n\t\t    port: 443,          // Port\n\t\t    protocol: 'https',  // Network protocol http or https\n\t\t    timeout: 20000,     // Network request timeouts in milliseconds\n\t\t    logging: false,     // Enable network request logging\n\t\t});\n\t}\n});","/**\n * Get network info for Arweave blockchain\n * @blackprint node\n * @summary Arweave\n */\nBlackprint.registerNode(\"Arweave/Network/Info\",\nclass InfoNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** API that already connected to Arweave's blockchain */\n\t\tAPI: Arweave,\n\t\t/** Refresh/fetch the info */\n\t\tRefresh: Blackprint.Port.Trigger(async function({ iface }){\n\t\t\tlet node = iface.node;\n\t\t\tnode.output.Data = await node.input.API.network.getInfo();\n\t\t})\n\t};\n\n\tstatic output = {\n\t\t/** Raw response data */\n\t\tData: Blackprint.Port.StructOf(Object, {\n\t\t\t/** Current block number */\n\t\t\tBlocks: {type: Number, field: 'blocks'},\n\t\t\t/** Current info */\n\t\t\tCurrent: {type: String, field: 'current'},\n\t\t\t/** Number of active peers */\n\t\t\tPeers: {type: Number, field: 'peers'},\n\t\t}),\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Network Info\";\n\t}\n});","//> {Transaction, NodeToast, Context} = /_init.js\n//> {Arweave, Blackprint} = window\n\n/**\n * This node is used to transfer AR coin balance\n * from a sender's wallet to target's wallet\n * @blackprint node\n * @summary Arweave Tx\n */\nBlackprint.registerNode(\"Arweave/Transaction/Balance\",\nclass BalanceNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** API that already connected to Arweave's blockchain */\n\t\tAPI: Arweave,\n\t\t/** Sender wallet's signer */\n\t\tSigner: Signer,\n\t\t/** Target wallet's address */\n\t\tTarget: String,\n\t\t/** 1 AR = 1000,000,000,000 Winston (12 zeros) */\n\t\tWinston: String,\n\t};\n\n\tstatic output = {\n\t\t/**\n\t\t * Transaction\n\t\t * You can submit this to blockchain to execute this transaction\n\t\t */\n\t\tTx: Transaction,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Transfer balance\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync update(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tif(Input.API == null)\n\t\t\treturn this._toast.warn(\"API is required\");\n\n\t\tif(Input.Signer == null)\n\t\t\treturn this._toast.warn(\"Signer is required\");\n\n\t\tif(Input.Target == null)\n\t\t\treturn this._toast.warn(\"Target is required\");\n\n\t\tif(Input.Winston == null)\n\t\t\treturn this._toast.warn(\"Winston is required\");\n\n\t\tlet signer = Input.Signer;\n\t\tif(signer === Context._BrowserWallet)\n\t\t\tsigner = void 0;\n\n\t\tOutput.Tx = new Transaction(await Input.API.createTransaction({\n\t\t\ttarget: Input.Target,\n\t\t\tquantity: Input.Winston,\n\t\t}, signer._data), 'balance');\n\t}\n});","/**\n * Submit a transaction to be processed in the blockchain\n * @blackprint node\n * @summary Arweave sign and submit Tx\n */\nBlackprint.registerNode(\"Arweave/Transaction/Submit\",\nclass SubmitNode extends Blackprint.Node {\n\t// Avoid automatically submit without user interaction\n\tstatic input = {\n\t\t/** Trigger the submission */\n\t\tSubmit: Blackprint.Port.Trigger(function({ iface }){\n\t\t\tiface.node.submit();\n\t\t}),\n\t\t/** API that already connected to Arweave's blockchain */\n\t\tAPI: Arweave,\n\t\t/** Sender wallet's signer for signing the transaction */\n\t\tSigner: Signer,\n\t\t/** Transaction to be submitted */\n\t\tTx: Transaction,\n\t};\n\n\tstatic output = {\n\t\t/** Raw status response */\n\t\tStatus: Object,\n\t\t/** Percentage of uploaded file */\n\t\tPercent: Number,\n\t\t/**\n\t\t * Transaction id\n\t\t * You can use this to explore or download your file\n\t\t */\n\t\tTxId: String,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Submit Tx\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\t_sign = null;\n\tasync update(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tif(Input.API == null)\n\t\t\treturn this._toast.warn(\"API is required\");\n\n\t\tif(Input.Signer == null)\n\t\t\treturn this._toast.warn(\"Signer is required\");\n\n\t\tif(Input.Tx == null)\n\t\t\treturn this._toast.warn(\"Tx is required\");\n\n\t\tlet {API, Signer, Tx} = Input;\n\n\t\tthis._toast.warn(\"Signing...\");\n\t\tthis._sign = await API.transactions.sign(Tx._data, Signer._data);\n\t\tthis._toast.warn(\"Idle\");\n\t}\n\n\tasync submit(){\n\t\tawait this._sign;\n\n\t\tlet {Input, Output} = this.ref;\n\t\tthis._toast.warn(\"Submitting...\");\n\n\t\tlet {API, Tx} = Input;\n\t\tif(Tx._type === 'balance'){\n\t\t\tOutput.Status = await API.transactions.post(Tx._data);\n\n\t\t\tif(Output.Status.status === 200){\n\t\t\t\tthis._toast.clear();\n\t\t\t\tthis._toast.success(\"Submitted\");\n\n\t\t\t\tOutput.TxId = Tx._data.id;\n\t\t\t}\n\t\t\telse if(Output.Status.status >= 500)\n\t\t\t\tthis._toast.warn(\"Server Error\");\n\t\t\telse if(Output.Status.status >= 400)\n\t\t\t\tthis._toast.warn(\"Invalid Transaction\");\n\t\t\telse this._toast.warn(\"Unknown status\");\n\t\t}\n\t\telse if(Tx._type === 'upload_file'){\n\t\t\tlet uploader = Output.Status = await API.transactions.getUploader(Tx._data);\n\n\t\t\twhile (!uploader.isComplete) {\n\t\t\t\tawait uploader.uploadChunk();\n\t\t\t\tthis._toast.warn(`Uploading ${uploader.uploadedChunks}/${uploader.totalChunks}`);\n\t\t\t\tOutput.Percent = uploader.pctComplete;\n\t\t\t}\n\n\t\t\tthis._toast.clear();\n\t\t\tthis._toast.success(\"Uploaded\");\n\n\t\t\tOutput.TxId = Tx._data.id;\n\t\t}\n\t}\n});","//> {Transaction, NodeToast, Context} = /_init.js\n//> {Arweave, Blackprint} = window\n\n/**\n * Submit a transaction to be processed in the blockchain\n * @blackprint node\n * @summary Arweave Tx\n */\nBlackprint.registerNode(\"Arweave/Transaction/Upload\",\nclass UploadNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** API that already connected to Arweave's blockchain */\n\t\tAPI: Arweave,\n\t\t/** Sender wallet's signer for signing the transaction */\n\t\tSigner: Signer,\n\t\t/** Data that will be uploaded */\n\t\tData: Blackprint.Port.Union([ ArrayBuffer, Blob, String ]),\n\t};\n\n\tstatic output = {\n\t\t/**\n\t\t * Transaction\n\t\t * You can submit this to blockchain to execute this transaction\n\t\t */\n\t\tTx: Transaction,\n\t\t/** Estimated fee in Winston */\n\t\tFee: String,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Upload file\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync update(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tif(Input.API == null)\n\t\t\treturn this._toast.warn(\"API is required\");\n\n\t\tif(Input.Signer == null)\n\t\t\treturn this._toast.warn(\"Signer is required\");\n\n\t\tif(Input.Data == null)\n\t\t\treturn this._toast.warn(\"Data is required\");\n\n\t\tlet {Signer, Data} = Input;\n\t\tif(Signer === Context._BrowserWallet)\n\t\t\tSigner = void 0;\n\n\t\tthis._toast.clear();\n\n\t\tlet unsigned = await Input.API.createTransaction({\n\t\t\tdata: Data instanceof Blob ? await Data.arrayBuffer() : Data\n\t\t}, Signer._data);\n\n\t\tlet tx = new Transaction(unsigned, 'upload_file');\n\n\t\tif(Data.type)\n\t\t\tunsigned.addTag('Content-Type', Data.type);\n\n\t\tOutput.Fee = tx._data.reward;\n\t\tOutput.Tx = tx;\n\t}\n});","/**\n * Submit a transaction to be processed in the blockchain\n * @blackprint node\n * @summary Arweave\n */\nBlackprint.registerNode(\"Arweave/Wallet/Balance\",\nclass BalanceNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** API that already connected to Arweave's blockchain */\n\t\tAPI: Arweave,\n\t\t/** Wallet's address */\n\t\tAddress: String,\n\t};\n\tstatic output = {\n\t\t/** Wallet balance in Winston */\n\t\tBalance: String,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Wallet Balance\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync update(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tif(Input.API == null)\n\t\t\treturn this._toast.warn(\"API is required\");\n\n\t\tif(Input.Address === '')\n\t\t\treturn this._toast.warn(\"Address is required\");\n\n\t\tthis._toast.clear();\n\t\tOutput.Balance = await Input.API.wallets.getBalance(Input.Address);\n\t\t// Input.API.ar.winstonToAR\n\t}\n});","/**\n * Get a wallet signer from browser extension\n * @blackprint node\n * @summary Arweave\n */\nBlackprint.registerNode(\"Arweave/Wallet/Browser\",\nclass BrowserNode extends Blackprint.Node {\n\tstatic output = {\n\t\t/** Wallet's signer */\n\t\tSigner: Signer,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Browser Wallet\";\n\t}\n\n\timported(){\n\t\tthis.output.Signer = Context._BrowserWallet;\n\t}\n});","/**\n * Generate new wallet randomly\n * This may take a few minute on slow computer for generating RSA\n * @blackprint node\n * @summary Arweave\n */\nBlackprint.registerNode(\"Arweave/Wallet/Generate\",\nclass GenerateNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** API that already connected to Arweave's blockchain */\n\t\tAPI: Arweave,\n\t};\n\n\tstatic output = {\n\t\t/** Public key (wallet address) */\n\t\tPublic: String,\n\t\t/** Private key this must be keep secret */\n\t\tPrivate: Object,\n\t\t/** This wallet's signer */\n\t\tSigner: Signer,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Generate Wallet\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync update(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tlet api = Input.API;\n\n\t\tthis._toast.warn(\"Generating RSA...\");\n\t\tlet wallet = await api.wallets.generate();\n\t\tthis._toast.clear();\n\n\t\tOutput.Private = wallet;\n\t\tOutput.Signer = new Signer(wallet);\n\t\tOutput.Public = await api.wallets.jwkToAddress(wallet);\n\t}\n});","/**\n * Import a wallet from a private key\n * @blackprint node\n * @summary Arweave\n */\nBlackprint.registerNode(\"Arweave/Wallet/Import\",\nclass ImportNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** API that already connected to Arweave's blockchain */\n\t\tAPI: Arweave,\n\t\t/** Private key */\n\t\tPrivate: Blackprint.Port.Union([Object, Blob, String]),\n\t};\n\tstatic output = {\n\t\t/** Public key (wallet address) */\n\t\tPublic: String,\n\t\t/** Private key this must be keep secret */\n\t\tPrivate: Object,\n\t\t/** This wallet's signer */\n\t\tSigner: Signer,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Import Wallet\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tasync update(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tif(Input.API == null)\n\t\t\treturn this._toast.warn(\"API is required\");\n\n\t\tif(!Input.Private)\n\t\t\treturn this._toast.warn(\"Private Key is required\");\n\n\t\tlet privateKey = Input.Private;\n\n\t\tif(privateKey.constructor === Blob)\n\t\t\tprivateKey = await Input.Blob.text();\n\n\t\tif(privateKey.constructor === String)\n\t\t\tprivateKey = JSON.parse(privateKey);\n\n\t\tthis._toast.clear();\n\t\tlet api = Input.API;\n\n\t\tOutput.Signer = new Signer(privateKey);\n\t\tOutput.Public = await api.wallets.jwkToAddress(privateKey);\n\t\tOutput.Private = privateKey;\n\t}\n});","//> {Transaction, Context} = /_init.js\n\n/**\n * Submit a transaction to be processed in the blockchain\n * @blackprint node\n * @summary Arweave Tx\n */\nBlackprint.registerNode(\"Arweave/Transaction/Add/Tag\",\nclass TagNode extends Blackprint.Node {\n\tstatic input = {\n\t\t/** Transaction that you want to add a tag into */\n\t\tTx: Transaction,\n\t\t/** Content type tag */\n\t\tContentType: String,\n\t\t/** Tags in key-value object */\n\t\tKV: Object,\n\t};\n\n\tstatic output = {\n\t\t/** Transaction that can be submitted to blockchain */\n\t\tTx: Transaction,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Add tags\";\n\n\t\tthis._toast = new NodeToast(iface);\n\t}\n\n\tupdate(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tif(Input.Tx == null)\n\t\t\treturn this._toast.warn(\"Tx is required\");\n\n\t\tlet Tx = Input.Tx;\n\n\t\tif(Input.ContentType != ''){\n\t\t\tif(Input.ContentType.includes('/') === false)\n\t\t\t\treturn this._toast.warn(\"ContentType looks invalid type\");\n\n\t\t\tthis._toast.clear();\n\t\t\tTx._data.addTag('Content-Type', Input.ContentType);\n\t\t}\n\n\t\tif(Input.KV != null){\n\t\t\tlet kv = Input.KV;\n\n\t\t\tfor(let key in kv)\n\t\t\t\tTx._data.addTag(key, kv[key]);\n\t\t}\n\n\t\tthis._toast.clear();\n\t\tOutput.Tx = Input.Tx;\n\t}\n});"]}