/* MIT Licensed */
"use strict";var _InfoNode,_HTTPNode,_InfoNode2,_BalanceNode,_SubmitNode,_UploadNode,_BalanceNode2,_BrowserNode,_GenerateNode,_ImportNode,_TagNode;if(void 0===window)var window=globalThis;async function imports(t){return"undefined"!=typeof sf&&void 0!==sf.loader?await sf.loader.mjs(t):Promise.all(t.map(t=>import(t)))}imports.task=function(){return"undefined"!=typeof sf&&void 0!==sf.loader?sf.loader.task:null};let Blackprint=window.Blackprint.loadScope({url:import.meta.url,hasDocs:!0});var[Arweave]=await Blackprint.DepsLoader.js({window:["Arweave"],local:["arweave"],cdn:["https://cdn.jsdelivr.net/npm/arweave@^1.15.7/bundles/web.bundle.min.js"]});let Context=Blackprint.createContext("Arweave");Context.EventSlot={slot:"my-private-event-slot"};class NodeToast{constructor(t){this.iface=t}clear(){this.haveInfo&&this.haveInfo.destroy(),this.haveWarn&&this.haveWarn.destroy(),this.haveError&&this.haveError.destroy(),this.haveInfo=!1,this.haveWarn=!1,this.haveError=!1}_reduceText(t){return t.replace(/\w{15,}/g,t=>t.slice(0,5)+"...")}info(t){this.iface.$decoration&&(t=this._reduceText(t),this.haveInfo?this.haveInfo.text=t:this.haveInfo=this.iface.$decoration.info(t))}warn(t){this.iface.$decoration&&(t=this._reduceText(t),this.haveWarn?this.haveWarn.text=t:this.haveWarn=this.iface.$decoration.warn(t))}error(t){this.iface.$decoration&&(t=this._reduceText(t),this.haveError?this.haveError.text=t:this.haveError=this.iface.$decoration.error(t))}success(t){this.iface.$decoration&&this.iface.$decoration.success(this._reduceText(t))}}Context.NodeToast=NodeToast;class Transaction{constructor(t,e){this._data=t,this._type=e}}class Signer{constructor(t){this._data=t}}Context.Transaction=Transaction,Context.Signer=Signer,Context._BrowserWallet=new Signer,Blackprint.utils.renameTypeName({Transaction:Transaction,Signer:Signer,Arweave:Arweave});let Blob=window.Blob;var _Class;void 0===Blob&&(Blob=(await import("node:buffer")).Blob),Blackprint.registerNode("Arweave/Blocks/Info",((_InfoNode=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Block Info"}}).input={API:Arweave,Hash:String,Refresh:Blackprint.Port.Trigger(async function({iface:t}){let e=t.node,a=e.input.Hash;e.output.Data=""===a?await e.input.API.blocks.getCurrent():await e.input.API.blocks.get(a),e.routes.routeOut()})},_InfoNode.output={Data:Object},_InfoNode)),Blackprint.registerNode("Arweave/Connection/HTTP",((_HTTPNode=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Arweave Connection"}imported(){this.output.API=new Arweave({host:"arweave.net",port:443,protocol:"https",timeout:2e4,logging:!1})}}).output={API:Arweave},_HTTPNode)),Blackprint.registerNode("Arweave/Network/Info",((_InfoNode2=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Network Info"}}).input={API:Arweave,Refresh:Blackprint.Port.Trigger(async function({iface:t}){let e=t.node;e.output.Data=await e.input.API.network.getInfo()})},_InfoNode2.output={Data:Blackprint.Port.StructOf(Object,{Blocks:{type:Number,field:"blocks"},Current:{type:String,field:"current"},Peers:{type:Number,field:"peers"}})},_InfoNode2)),Blackprint.registerNode("Arweave/Transaction/Balance",((_BalanceNode=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Transfer balance",this._toast=new NodeToast(e)}async update(){let{Input:t,Output:e}=this.ref;if(null==t.API)return this._toast.warn("API is required");if(null==t.Signer)return this._toast.warn("Signer is required");if(null==t.Target)return this._toast.warn("Target is required");if(null==t.Winston)return this._toast.warn("Winston is required");let a=t.Signer;a===Context._BrowserWallet&&(a=void 0),e.Tx=new Transaction(await t.API.createTransaction({target:t.Target,quantity:t.Winston},a._data),"balance")}}).input={API:Arweave,Signer:Signer,Target:String,Winston:String},_BalanceNode.output={Tx:Transaction},_BalanceNode)),Blackprint.registerNode("Arweave/Transaction/Submit",(_SubmitNode=class extends Blackprint.Node{constructor(t){super(t),this._sign=null;let e=this.setInterface();e.title="Submit Tx",this._toast=new NodeToast(e)}async update(){let{Input:t,Output:e}=this.ref;if(null==t.API)return this._toast.warn("API is required");if(null==t.Signer)return this._toast.warn("Signer is required");if(null==t.Tx)return this._toast.warn("Tx is required");let{API:a,Signer:r,Tx:n}=t;this._toast.warn("Signing..."),this._sign=await a.transactions.sign(n._data,r._data),this._toast.warn("Idle")}async submit(){await this._sign;let{Input:t,Output:e}=this.ref;this._toast.warn("Submitting...");let{API:a,Tx:r}=t;if("balance"===r._type)e.Status=await a.transactions.post(r._data),200===e.Status.status?(this._toast.clear(),this._toast.success("Submitted"),e.TxId=r._data.id):e.Status.status>=500?this._toast.warn("Server Error"):e.Status.status>=400?this._toast.warn("Invalid Transaction"):this._toast.warn("Unknown status");else if("upload_file"===r._type){let t=e.Status=await a.transactions.getUploader(r._data);for(;!t.isComplete;)await t.uploadChunk(),this._toast.warn(`Uploading ${t.uploadedChunks}/${t.totalChunks}`),e.Percent=t.pctComplete;this._toast.clear(),this._toast.success("Uploaded"),e.TxId=r._data.id}}},_SubmitNode.input={Submit:Blackprint.Port.Trigger(function({iface:t}){t.node.submit()}),API:Arweave,Signer:Signer,Tx:Transaction},_SubmitNode.output={Status:Object,Percent:Number,TxId:String},_SubmitNode)),Blackprint.registerNode("Arweave/Transaction/Upload",(_UploadNode=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Upload file",this._toast=new NodeToast(e)}async update(){let{Input:t,Output:e}=this.ref;if(null==t.API)return this._toast.warn("API is required");if(null==t.Signer)return this._toast.warn("Signer is required");if(null==t.Data)return this._toast.warn("Data is required");let{Signer:a,Data:r}=t;a===Context._BrowserWallet&&(a=void 0),this._toast.clear();let n=await t.API.createTransaction({data:r instanceof Blob?await r.arrayBuffer():r},a._data),i=new Transaction(n,"upload_file");r.type&&n.addTag("Content-Type",r.type),e.Fee=i._data.reward,e.Tx=i}},_UploadNode.input={API:Arweave,Signer:Signer,Data:Blackprint.Port.Union([ArrayBuffer,Blob,String])},_UploadNode.output={Tx:Transaction,Fee:String},_UploadNode)),Blackprint.registerNode("Arweave/Wallet/Balance",((_BalanceNode2=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Wallet Balance",this._toast=new NodeToast(e)}async update(){let{Input:t,Output:e}=this.ref;return null==t.API?this._toast.warn("API is required"):""===t.Address?this._toast.warn("Address is required"):(this._toast.clear(),void(e.Balance=await t.API.wallets.getBalance(t.Address)))}}).input={API:Arweave,Address:String},_BalanceNode2.output={Balance:String},_BalanceNode2)),Blackprint.registerNode("Arweave/Wallet/Browser",((_BrowserNode=class extends Blackprint.Node{constructor(t){super(t),this.setInterface().title="Browser Wallet"}imported(){this.output.Signer=Context._BrowserWallet}}).output={Signer:Signer},_BrowserNode)),Blackprint.registerNode("Arweave/Wallet/Generate",((_GenerateNode=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Generate Wallet",this._toast=new NodeToast(e)}async update(){let{Input:t,Output:e}=this.ref,a=t.API;this._toast.warn("Generating RSA...");let r=await a.wallets.generate();this._toast.clear(),e.Private=r,e.Signer=new Signer(r),e.Public=await a.wallets.jwkToAddress(r)}}).input={API:Arweave},_GenerateNode.output={Public:String,Private:Object,Signer:Signer},_GenerateNode)),Blackprint.registerNode("Arweave/Wallet/Import",((_ImportNode=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Import Wallet",this._toast=new NodeToast(e)}async update(){let{Input:t,Output:e}=this.ref;if(null==t.API)return this._toast.warn("API is required");if(!t.Private)return this._toast.warn("Private Key is required");let a=t.Private;a.constructor===Blob&&(a=await t.Blob.text()),a.constructor===String&&(a=JSON.parse(a)),this._toast.clear();let r=t.API;e.Signer=new Signer(a),e.Public=await r.wallets.jwkToAddress(a),e.Private=a}}).input={API:Arweave,Private:Blackprint.Port.Union([Object,Blob,String])},_ImportNode.output={Public:String,Private:Object,Signer:Signer},_ImportNode)),Blackprint.registerNode("Arweave/Transaction/Add/Tag",((_TagNode=class extends Blackprint.Node{constructor(t){super(t);let e=this.setInterface();e.title="Add tags",this._toast=new NodeToast(e)}update(){let{Input:t,Output:e}=this.ref;if(null==t.Tx)return this._toast.warn("Tx is required");let a=t.Tx;if(""!=t.ContentType){if(!1===t.ContentType.includes("/"))return this._toast.warn("ContentType looks invalid type");this._toast.clear(),a._data.addTag("Content-Type",t.ContentType)}if(null!=t.KV){let e=t.KV;for(let t in e)a._data.addTag(t,e[t])}this._toast.clear(),e.Tx=t.Tx}}).input={Tx:Transaction,ContentType:String,KV:Object},_TagNode.output={Tx:Transaction},_TagNode));
//# sourceMappingURL=nodes-arweave.mjs.map